defmodule ExfitsTest do
  use ExUnit.Case
  doctest Exfits

  @temp_dir Path.join(System.tmp_dir!(), "exfits_test")

  setup do
    # Create temp directory for test files
    File.mkdir_p!(@temp_dir)

    on_exit(fn ->
      # Clean up test files when test completes
      File.rm_rf!(@temp_dir)
    end)

    :ok
  end

  test "bitpix constants are defined" do
    bitpix = Exfits.bitpix()
    assert is_map(bitpix)
    assert bitpix.byte == 8
    assert bitpix.short == 16
    assert bitpix.int == 32
    assert bitpix.float == -32
    assert bitpix.double == -64
  end

  test "write and read single extension FITS file" do
    # Create a simple 10x10 float image with values 1.0 to 100.0
    data = for y <- 1..10, x <- 1..10, do: (y - 1) * 10 + x
    bin_data = :binary.list_to_bin(for val <- data, do: <<val::float-32>>)

    # Generate basic FITS headers
    headers = [
      "SIMPLE  =                    T / Standard FITS format",
      "BITPIX  =                  -32 / IEEE single precision floating point",
      "NAXIS   =                    2 / Number of axes",
      "NAXIS1  =                   10 / Size of axis 1",
      "NAXIS2  =                   10 / Size of axis 2",
      "ORIGIN  = 'Elixir ExFITS test' / File origin",
      "DATE    = '#{DateTime.utc_now() |> DateTime.to_iso8601()}' / File creation date",
      "COMMENT   Generated by ExFITS test suite",
      "END"
    ]

    # Write the FITS file
    test_file = Path.join(@temp_dir, "test_single.fits")
    {:ok, filename} = Exfits.write_fits(test_file, bin_data, headers)
    assert filename == test_file
    assert File.exists?(test_file)

    # TODO: Add read tests when read functionality is fully implemented
  end

  test "write multi-extension FITS file" do
    # Create a primary HDU (empty image, just headers)
    primary_headers = [
      "SIMPLE  =                    T / Standard FITS format",
      "BITPIX  =                  -32 / IEEE single precision floating point",
      "NAXIS   =                    0 / No image data in primary HDU",
      "EXTEND  =                    T / File may contain extensions",
      "ORIGIN  = 'Elixir ExFITS test' / File origin",
      "DATE    = '#{DateTime.utc_now() |> DateTime.to_iso8601()}' / File creation date",
      "COMMENT   Generated by ExFITS test suite - multi-extension test",
      "END"
    ]
    primary_data = <<>>

    # Create first image extension - 5x5 grid
    ext1_data = :binary.list_to_bin(for val <- 1..25, do: <<val::float-32>>)
    ext1_headers = [
      "XTENSION= 'IMAGE   '           / Image extension",
      "BITPIX  =                  -32 / IEEE single precision floating point",
      "NAXIS   =                    2 / Number of axes",
      "NAXIS1  =                    5 / Size of axis 1",
      "NAXIS2  =                    5 / Size of axis 2",
      "EXTNAME = 'EXT1    '           / Extension name",
      "END"
    ]

    # Create second image extension - 3x3 grid
    ext2_data = :binary.list_to_bin(for val <- 1..9, do: <<val * 2.0::float-32>>)
    ext2_headers = [
      "XTENSION= 'IMAGE   '           / Image extension",
      "BITPIX  =                  -32 / IEEE single precision floating point",
      "NAXIS   =                    2 / Number of axes",
      "NAXIS1  =                    3 / Size of axis 1",
      "NAXIS2  =                    3 / Size of axis 2",
      "EXTNAME = 'EXT2    '           / Extension name",
      "END"
    ]

    # Prepare extensions list
    extensions = [
      %{data: primary_data, headers: primary_headers},
      %{data: ext1_data, headers: ext1_headers},
      %{data: ext2_data, headers: ext2_headers}
    ]

    # Write multi-extension FITS file
    test_file = Path.join(@temp_dir, "test_multi.fits")
    {:ok, filename} = Exfits.write_multi_extension_fits(test_file, extensions)
    assert filename == test_file
    assert File.exists?(test_file)

    # TODO: Add read tests when multi-extension read functionality is implemented
  end
end
